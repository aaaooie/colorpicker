<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>цветовой тотализатор</title>
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Martian+Mono&display=swap');
    </style>
    <link rel="stylesheet" type="text/css" href="style.css">
    <link rel="stylesheet" type="text/css" href="pick.css">

    <style type="text/css" id=inputstyler></style>
</head>
<body>

    <section id=pick >


        <div
            id=colorpicker
            style="background-color: gray;"

        ></div>

        <div
            id=brightcontrol
            style=" background-color: black;"

        >

            <div id="slider"></div>
        </div>

        <div id="_form">

            <form method=post action="" >
                <h3 id=color_selected></h3>

                <input required
                    autocomplete="off"
                    type="text" name="user_name"
                    placeholder="твоё имя"
                    value="{{user_name}}"
                    oninvalid="this.setCustomValidity('?')"
                    oninput="this.setCustomValidity('')"/
                />
                <input
                    autocomplete="off"
                    value="{{user_link}}"
                    type="text" name="user_link"
                    placeholder="ссылка на тебя"
                />

                <input
                    autocomplete="off"
                    value="{{color_name}}"
                    type="text" name="color_name"
                    placeholder="название цвета"
                />

                <input
                    id=color_value
                    value="{{color_value}}"
                    type="hidden" name=color_value
                />

                <button id=send>
                    отправить
                </button>


            </form>


        </div>

    </section>

    <svg id=picker width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <rect id="inner_picker" x="1" y="1" width="22" height="22" rx="11" fill="#0500FF"/>
  <rect x="1" y="1" width="22" height="22" rx="11" stroke="white" stroke-width="2"/>
</svg>

</body>

<script type="text/javascript">

  // data passage from the server
  let _previous='{{{color_value}}}'

  //helpers

  const $ = str=>document.querySelectorAll(str) // str->array of el

  const $$ = str=>f=>Array.from($(str)).map(f)

  let id=s=>document.getElementById(s)

  // cache

  const $colorpicker = id('colorpicker')

  const inputstyler=id('inputstyler')

  let rrr=$colorpicker.getBoundingClientRect()

  // layout function

  let draw=e=> {

    let padding=0

    let height = window.innerHeight-padding

    Array.from($('section')).map(el=>el.style.height=`${height}px`)

  }

  draw(null)

  addEventListener('resize', draw)

  let basic_color = '#ffffff'
  let selected_color = '#ffffff'
  let bright=1

  let set_brightness=color=>'#'+color
    .slice(1)
    .match(/.{1,2}/g)
    .map(s=>parseInt(s,16))
    .map(a=>Math.round(a*bright))
    .map(n=>n.toString(16))
    .map(s=>1==s.length?`0${s}`:s)
    .join('')

  let select_color =c=>{

    selected_color=c

    $$('body')(el=>el.style.background=c)

    $$('#_form input')(el=>el.style.color=c)

    id('color_selected').innerText=c.slice(1)
    id('color_value').setAttribute('value',c)

    id('send').style.color=c

    inputstyler.innerText=`#_form input::placeholder{color:${c};}`

    id('_form').style.display='block'

    picker=id('picker')

  }

  let update_brightcontrol = (w)=>{

    let r = ((1-bright)*w)-10

    if (r<0)r=0
    if (r>w-22)r=w-22

    id('slider').style.right=`${r}px`

    select_color(set_brightness(basic_color))
  }

  let picking=false

  let picker=id('picker')


  // console.log(_previous)
  if (_previous!==''){

    select_color(_previous)
  }


  let color_shifts= [ // tone spectre encoded
    [1,'+',0],
    ['-',1,0],
    [0,1,'+'],
    [0,'-',1],
    ['+',0,1],
    [1,0,'-']
  ]

  const get_color=(event)=>{

    let r=rrr

    let x=event.x-r.x
    let y=event.y-r.y

    if(y<0)y=0
    if(y>r.height)y=r.height

    if (x>r.width)x=r.width

    let range=parseInt('ff',16) //256

    let stripe_width=r.width/color_shifts.length

    let tone_shift = Math.floor(x/stripe_width)

    if (tone_shift>color_shifts.length-1)tone_shift=color_shifts.length-1

    let brightness = 1-y/r.height

    let tone = color_shifts[tone_shift].map(i=>{

      if ('string'==typeof i) {
        let gradient=(x-tone_shift*stripe_width)/stripe_width

        if('+'==i){ return range*gradient}
        if('-'==i){ return range*(1-gradient)}
      } else {
        return i*range
      }
    })

    let _fixed = tone.map(i=>i+brightness*(range-i))

    let _color = _fixed.map(i=>Math.round(i).toString(16)).map(i=>{
      if(i.length==1){
        return '0'+i
      } else return i
    })
    .join('')


    basic_color=`#${_color}`

    id('brightcontrol').setAttribute(
      'style',
      `background:linear-gradient(90deg, #000000 0%, ${basic_color} 100%);`)

    // refactorme: setter in get function

    select_color(set_brightness(basic_color))


    return `#${_color}`

  }

  const stop_picker=()=>{
    picking=false
    $colorpicker.style.cursor='pointer'
    id('picker').style.cursor='pointer'

    basic_color=get_color(event)

    id('inner_picker').setAttribute('fill',basic_color)

    select_color(set_brightness(basic_color))
  }

  let start_picking = event=>{

      picking=true

      $colorpicker.style.cursor='none'
      picker.style.cursor='none'
      picker.style.display='block'

      picker.style.left=event.x-12
      picker.style.top=event.y-12

      let _c=get_color(event)

      id('inner_picker').setAttribute('fill',_c)

  } // end pick

  // addEventListener('click',pick)

  let drag = false

  let rr = id('brightcontrol').getBoundingClientRect()

  let ondown=e=>{


    rr = id('brightcontrol').getBoundingClientRect()
    rrr = $colorpicker.getBoundingClientRect() // update

    if(e.target.id=='brightcontrol'){
      document.body.classList.add('unselectable')

      drag=true

      bright = (e.x-rr.x)/rr.width

      if(bright>1)bright=1
      if(bright<0)bright=0

      update_brightcontrol(rr.width)

    }
    if(e.target.id=='slider'){
      document.body.classList.add('unselectable')

      drag=true
    }
    if(e.target.id=='colorpicker'){
      document.body.classList.add('unselectable')

      picking=true
      start_picking(e)
    }

  }

  let onup=e=>{
    document.body.classList.remove('unselectable')

    if(drag){
      drag=false
      bright = (e.x-rr.x)/rr.width

      if(bright>1)bright=1
      if(bright<0)bright=0

      update_brightcontrol(rr.width)

  }if(picking){stop_picker()}}

  let onmove=e=>{


    if (picking){

      let culer =get_color(e)

      let y=e.y
      let x=e.x
      if (y>rrr.height)y=rrr.height
      if (x>rrr.width)x=rrr.width

      picker.style.left=x-12
      picker.style.top=y-12

      id('inner_picker').setAttribute('fill',culer)
    }

    if (drag){

      bright = (e.x-rr.x)/rr.width

      if(bright>1)bright=1
      if(bright<0)bright=0

      update_brightcontrol(rr.width)
    }

  }


  addEventListener('mousedown', ondown)
  addEventListener('mouseup', onup)
  addEventListener('mousemove', onmove)

  addEventListener('resize',e=>{
    if (picking) stop_picker()
  })


  // DEPRICATED
  // if (eyeDropper) {
  //     eyeDropper.open().then(selectedColor => {
  //         basic_color=selectedColor.sRGBHex
  //         id('brightcontrol').setAttribute(
  //             'style',
  //             `background:linear-gradient(90deg, #000000 0%, ${basic_color} 100%);`)
  //         select_color(set_brightness(basic_color))
  //       }).catch(() => {
  //           console.log('eye dropper cancelled')
  //       })
  //       return
  // }


</script>

</html>